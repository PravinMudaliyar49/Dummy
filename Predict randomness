<body>
    <main class="main">
        <section class="section section-1">
            <div class="user_interact_container">
                <label for="redeem">
                    <input type="text" id="redeem" class="input | input_redeem"
                        placeholder="Comma separated (without space)">
                </label>
                <button class="btn | btn_restart">Restart</button>
            </div>
            <div class="output_container">
                <div class="message">Wrong answer!</div>
                <div class="incorrect_attempts_container">Incorrect attempts: <span class="output"
                        id="incorrect_attempts">3</span></div>
                <div class="least_attempts_container">Least attempts: <span class="output" id="least_attempts"></span>
                </div>
            </div>
        </section>
        <section class="section section-2">
            <div class="random_number_container"><span id="random_number">5</span></div>
            <div class="flex_center | user_numbers_container">
                <div class="flex_center | number | number_styling">1</div>
                <div class="flex_center | number | number_styling">2</div>
                <div class="flex_center | number | number_styling">3</div>
                <div class="flex_center | number | number_styling">4</div>
                <div class="flex_center | number | number_styling">5</div>
                <div class="flex_center | number | number_styling">6</div>
                <div class="flex_center | number | number_styling">7</div>
                <div class="flex_center | number | number_styling">8</div>
                <div class="flex_center | number | number_styling">9</div>
                <div class="flex_center | number | number_styling">10</div>
            </div>
        </section>
    </main>
</body>

// CSS

@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,500&display=swap');

*,
*::before,
*::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --ff-primary: 'Poppins', sans-serif;

    --clr-light-100: white;
    --clr-light-600: rgba(255, 255, 255, 0.3);
    --clr-dark-100: gray;
    --clr-dark-900: black;

    --clr-primary-100: lightblue;
    --clr-primary-opacity: rgba(173, 216, 230, 0.781);
    --clr-primary-500: #60b4f5bd;

    --fw-light: 300;
    --fw-semi-bold: 600;
    --fw-bold: 900;

    --border-rad1: 10px;

    --border1: 2px solid rgba(0, 0, 0, 0.082);

    --transition-1: 300ms ease-in-out;
    --transition-2: 300ms ease-in-out 100ms;

    --shadow-1: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
    --shadow-2: 0 1px 5px 0 rgba(0, 0, 0, 0.1);
    --monochrome-shadow: 0 2px 7px rgba(255, 255, 255, 0.4);

    --linear-gradient-direction: to top left;
    --primary-gradient-background: linear-gradient(var(--linear-gradient-direction), var(--clr-primary-100), var(--clr-primary-500));
}

html {
    background-image: var(--primary-gradient-background);
    background-attachment: fixed;
}

body {
    padding: 1em;

    font-family: var(--ff-primary);
    color: var(--clr-dark-900);
    font-weight: var(--fw-semi-bold);
}

a,
a:hover,
a:focus,
a:active {
    text-decoration: none;
    color: inherit;
}

li {
    list-style: none;
}

/* p {
		line-height: 1.5;
		font-size: 1.2rem;
} */

.flex_center {
    display: flex;
    justify-content: center;
    align-items: center;
}

.btn {
    border: none;
    background: none;
    line-height: 1;
    font-family: inherit;

    padding: 1.5em 3em;
    cursor: pointer;

    transition: all var(--transition-1);
    border-radius: 3px;
    user-select: none;
}

.btn:active {
    transform: translateY(5px);
    box-shadow: var(--shadow-2);
}

.input {
    padding: .5em;

    border: none;
    outline: none;
    border-radius: var(--border-rad1);

    text-align: center;
    background-color: var(--clr-light-600);
    transition: all var(--transition-1);
}

.input:focus {
    outline: 1px solid #ccc;
    background-color: rgba(255, 255, 255, 0.7);
}

input::placeholder {
    color: var(--clr-dark-100);
}

.main {
    display: flex;
}

.section {
    height: calc(100vh - 2em);
    width: 50%;

    display: flex;
    flex-direction: column;
    justify-content: space-between;

    padding: 2em;
}

.section-2 {
    align-items: center;
    gap: 2rem;
}

.user_interact_container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    align-items: flex-start;
}

.input_redeem {
    width: 15rem;
    padding: 1em;
    cursor: default;

    opacity: 0;
    transition: opacity var(--transition-1), background-color var(--transition-1), outline var(--transition-1);
}

.btn_restart {
    box-shadow: var(--shadow-1);
    background-color: var(--clr-light-100);
}

.btn_restart:hover {
    opacity: .92;
}

.output_container {
    font-size: 1.2rem;
}

.output_container>* {
    margin: 3rem 0;
}

.output {
    margin-left: .2rem;
    /* border-bottom: 2px dotted var(--clr-dark-100); */
}

.random_number_container {
    padding: 1em 2em;

    background-image: linear-gradient(var(--linear-gradient-direction), var(--clr-primary-100), var(--clr-primary-500));
    color: white;
    
    font-size: 1.7rem;
    border: 1.5px solid var(--clr-primary-500);
    border-radius: var(--border-rad1);

    box-shadow: var(--shadow-1);
}

.user_numbers_container {
    width: 70%;
    flex-wrap: wrap;
    gap: 1.5rem 3rem;
}

.number {
    height: 4rem;
    width: 4rem;
}

.number_styling {
    user-select: none;
    border-radius: 50%;
    background-color: var(--clr-light-600);
    cursor: pointer;
    transition: transform var(--transition-1);
}

.number:active {
    transform: translateY(3px);
}

// JS

'use strict';

const randomNumberEl = document.querySelector('#random_number');
const leastAttemptsEl = document.querySelector('#least_attempts');
const incorrectAttemptsEl = document.querySelector('#incorrect_attempts');
const numberElements = document.querySelectorAll('.number');

const inputRedeemEl = document.querySelector('.input_redeem');

const messageEl = document.querySelector('.message');

const winningAttempts = 2;

let incorrectAttempts = 0;
let leastAttempts = 0;
let neverWonGameBefore = true;
let userCorrectAttempts = 0;
let redeemString = '';

const init = function () {
    incorrectAttempts = 0;
    userCorrectAttempts = 0;

    // leastAttemptsEl.textContent = '';
    incorrectAttemptsEl.textContent = incorrectAttempts;
    messageEl.textContent = 'Start the game by pressing a number...';
    randomNumberEl.textContent = '?';

    document.querySelector('.section-2').style.backgroundColor = '';
    document.querySelector('.input_redeem').style.opacity = '0';
};

init();

const generateRandomNumber = (start, end) => Math.trunc(Math.random() * (end - start) + start) + 1;

for (let i = 0; i < numberElements.length; i++) {
    numberElements[i].addEventListener('click', function () {
        const clickedNumber = Number(numberElements[i].textContent);

        const randomlyGeneratedNumber = generateRandomNumber(0, 10);
        randomNumberEl.textContent = randomlyGeneratedNumber;

        if (clickedNumber === randomlyGeneratedNumber) {
            userCorrectAttempts++;
            messageEl.textContent = 'Correct prediction!!';

            // 2,2,
            redeemString += clickedNumber + ',';

            if (userCorrectAttempts === winningAttempts) {
                document.querySelector('.section-2').style.backgroundColor = 'rgb(58, 232, 58)';
                inputRedeemEl.style.opacity = '1';

                if (neverWonGameBefore === true || incorrectAttempts < leastAttempts) {
                    // Update the leastAttempts?
                    leastAttempts = incorrectAttempts;
                    neverWonGameBefore = false;
                    document.querySelector('#least_attempts').textContent = incorrectAttempts;
                }

                /* 
                Incorrect attempts => 20
                Least attempts => Infinity.
                */
            }
        } else {
            messageEl.textContent = 'Wrong prediction!!';
            incorrectAttempts++;
            incorrectAttemptsEl.textContent = incorrectAttempts;
        }
    });
}

/*
Incorrect attempts => 1.
Least attempts => 5.
*/

document.querySelector('.btn').addEventListener('click', function () {
    // Check if the user redeems a point:
    const userInputValue = inputRedeemEl.value + ',';
    console.log(redeemString, userInputValue);

    // 2,2, 2,2,
    if (redeemString === userInputValue) {
        leastAttempts--;

        document.querySelector('#least_attempts').textContent = leastAttempts;
    }

    init();
});

